{"version":3,"sources":["api/APIUtils.js","components/MovieItem.js","components/SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["containsMovie","movie","movieList","i","length","imdbID","MovieItem","Title","Year","Type","Poster","buttonType","buttonHandler","nominatedList","useState","detailedInfo","setDetailedInfo","useEffect","action","fetch","then","res","json","result","console","log","getMovieInfo","className","src","getImageURL","alt","Plot","onClick","movieObject","disabled","SearchBar","handleChange","type","placeholder","onChange","event","target","value","App","initialNominations","JSON","parse","window","localStorage","getItem","searchList","setSearchList","searchValue","setSearchValue","setNominatedList","nominateMovie","newNominatedList","removeMovie","filter","search","Search","setItem","stringify","newValue","map","key","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e398fa6.chunk.js","sourcesContent":["/**\r\n * @file This file is used for general API utils, and methods that can be reused between components.\r\n * @author Domenic Labbate\r\n */\r\n\r\n/**\r\n * This method checks if a given movie is in an array of movies\r\n * We do this by referring to the imdbID (unique)\r\n * @param {Object} movie - the movie we want to check\r\n * @param {Array} movieList the array of movies resulting from the search bar\r\n */\r\nconst containsMovie = (movie, movieList) => {\r\n  let i;\r\n  for (i = 0; i < movieList.length; i++) {\r\n    if (movieList[i].imdbID === movie.imdbID) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * This method makes a call to the OMDB API (using a search term such as \"lord of the rings\")\r\n * It retrieves an array of movies matching the search term\r\n * @param {string} search - the string in the search bar\r\n * @param {Function} action - function to be executed when the fetch has completed (e.g. setState)\r\n */\r\nconst getMovies = (search, action) => {\r\n  if (search) {\r\n    fetch(`https://www.omdbapi.com/?s=${search}&apikey=45ae6804&type=movie`)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        console.log(result);\r\n        action(result.Search);\r\n      });\r\n  }\r\n};\r\n\r\n/**\r\n * This method makes a call to the OMDB API (using an imdbID such as \"tt0241527\")\r\n * It retrieves detailed information, including the movie plot, year, and so forth\r\n * @param {string} imdbID - unique imdb identification of the movie\r\n * @param {Function} action - function to be executed when the fetch has completed (e.g. setState)\r\n */\r\nconst getMovieInfo = (imdbID, action) => {\r\n  fetch(`https://www.omdbapi.com/?i=${imdbID}&apikey=45ae6804`)\r\n    .then((res) => res.json())\r\n    .then((result) => {\r\n      console.log(result);\r\n      action(result);\r\n    });\r\n};\r\n\r\nexport { containsMovie, getMovieInfo, getMovies };\r\n","/**\r\n * @file This component is used for displaying a movie item, consiting of the movie poster, year and title.\r\n * @author Domenic Labbate\r\n */\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./MovieItem.css\";\r\nimport { containsMovie, getMovieInfo } from \"../api/APIUtils.js\";\r\n\r\n/**\r\n *\r\n * @param {string} Title - the title of a movie (given by OMDB API)\r\n * @param {string} Year - the release year of a movie (given by OMDB API)\r\n * @param {string} imdbID - the imdb identification key (given by OMDB API)\r\n * @param {string} Type - \"movie\". Note that we ONLY search for movies in our call to the OMDB API (no tv shows, etc.)\r\n * @param {string} Poster - url to the movie poster. If it does not exist, will return \"N/A\" (given by OMDB API)\r\n * @param {string} buttonType - This can be either \"Nominate\" or \"Remove\"\r\n * @param {Function} buttonHandler - Function that specifies what action the button should take\r\n * @param {Array} nominatedList - The list of movies the user has currently nominated\r\n */\r\nconst MovieItem = ({\r\n  Title,\r\n  Year,\r\n  imdbID,\r\n  Type,\r\n  Poster,\r\n  buttonType,\r\n  buttonHandler,\r\n  nominatedList,\r\n}) => {\r\n  const [detailedInfo, setDetailedInfo] = useState({});\r\n\r\n  /**\r\n   * This method checks if the given movie item has a poster, if not it will return a default image.\r\n   * @param {string} Poster - link to movie poster. Value will be \"N/A\" if it does not exist.\r\n   */\r\n  const getImageURL = (Poster) => {\r\n    if (Poster === \"N/A\") {\r\n      return \"https://cdn4.iconfinder.com/data/icons/basic-flat-ui-extra-set-200-item/76/ui_ux_minimalist_button_video_film_roll-512.png\";\r\n    } else {\r\n      return Poster;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * This method sets the buttonHandler of the MovieItem, depending on whether \"Nominate\" or \"Remove\".\r\n   * This is done so that the component can be reused for both the list of search results, along with the list of nominated movies.\r\n   */\r\n  const nominateOrRemove = () => {\r\n    const movieObject = {\r\n      Title: Title,\r\n      Year: Year,\r\n      imdbID: imdbID,\r\n      Type: Type,\r\n      Poster: Poster,\r\n    };\r\n    if (buttonType === \"Nominate\") {\r\n      console.log(movieObject);\r\n      buttonHandler(movieObject);\r\n    } else if (buttonType === \"Remove\") {\r\n      buttonHandler(movieObject);\r\n    } else {\r\n      console.log(\"Invalid buttonType for MovieItem\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * This method checks if a given movie has already been nominated. If this is the case, the \"Nominate\" button (for this specific MovieItem) will be disabled.\r\n   * Note however that the \"Remove\" button is never disabled. We always want the user to be able to remove a movie from the nomination list.\r\n   */\r\n  const isButtonDisabled = () => {\r\n    const movieObject = {\r\n      Title: Title,\r\n      Year: Year,\r\n      imdbID: imdbID,\r\n      Type: Type,\r\n      Poster: Poster,\r\n    };\r\n    if (\r\n      buttonType === \"Nominate\" &&\r\n      containsMovie(movieObject, nominatedList)\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Calls the OMDB API to retrieve detailed info (plot) of the movie.\r\n   * We specify [], so it will only execute once\r\n   */\r\n  useEffect(() => {\r\n    getMovieInfo(imdbID, setDetailedInfo);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"movieItemContainer\">\r\n      <div className=\"imageContainer\">\r\n        <img className=\"movieImage\" src={getImageURL(Poster)} alt=\"\" />\r\n        <div className=\"overlay\">\r\n          <p className=\"detailedInfo\">{detailedInfo.Plot}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"movieInformation\">\r\n        <h3 className=\"movieTitle\">\r\n          {Title}\r\n          <span> ({Year})</span>\r\n        </h3>\r\n      </div>\r\n      <div className=\"buttonContainer\">\r\n        <button\r\n          className=\"movieButton\"\r\n          onClick={nominateOrRemove}\r\n          disabled={isButtonDisabled()}\r\n        >\r\n          {buttonType}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieItem;\r\n","/**\r\n * @file This component is used for entering a value in a search bar to query for a movie from the OMDB API\r\n * @author Domenic Labbate\r\n */\r\n\r\nimport React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\n/**\r\n * @param {Function} handleChange - specifies the action to be taken when the search term has changed (e.g. call the OMDB API with the new search term).\r\n */\r\nconst SearchBar = ({ handleChange }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        className=\"input\"\r\n        type=\"text\"\r\n        placeholder=\"Seach for movies to nominate...\"\r\n        onChange={(event) => handleChange(event.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","/**\r\n * @file The purpose of this project is to search for movies using the OMDB API and \"nominate\" a total of 5 movies\r\n * @author Domenic Labbate\r\n */\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport MovieItem from \"./components/MovieItem\";\r\nimport SearchBar from \"./components/SearchBar\";\r\nimport { containsMovie, getMovies } from \"./api/APIUtils.js\";\r\n\r\nfunction App() {\r\n  const initialNominations = JSON.parse(\r\n    window.localStorage.getItem(\"nominatedList\")\r\n  );\r\n  const [searchList, setSearchList] = useState([]); //List of movies resulting from the search\r\n  const [searchValue, setSearchValue] = useState(\"\"); //Text input of the search bar. e.g \"The Lord of the Rings\"\r\n  const [nominatedList, setNominatedList] = useState(initialNominations || []); //List of nominated movies\r\n\r\n  const updateSearchValue = (newValue) => {\r\n    setSearchValue(newValue);\r\n  };\r\n\r\n  /**\r\n   * This method adds a movie to the list of nominated movies.\r\n   * @param {Object} movie - the movie object to add.\r\n   */\r\n  const nominateMovie = (movie) => {\r\n    console.log(\"Nominating a movie!\");\r\n    console.log(movie);\r\n    if (nominatedList.length < 5 && !containsMovie(movie, nominatedList)) {\r\n      const newNominatedList = [...nominatedList, movie]; //append the new movie to the list of nominated movies\r\n      setNominatedList(newNominatedList);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * This method removes a movie to the list of nominated movies.\r\n   * We use the imdbID as the unique index.\r\n   * @param {Object} movie - the movie object to remove.\r\n   */\r\n  const removeMovie = (movie) => {\r\n    const { imdbID } = movie;\r\n    const newNominatedList = nominatedList.filter(\r\n      (movie) => !(movie.imdbID === imdbID)\r\n    );\r\n    setNominatedList(newNominatedList);\r\n    console.log(\"Removing a movie from the list of nominations.\");\r\n    console.log(movie);\r\n  };\r\n\r\n  /**\r\n   * Every time the \"searchValue\" is updated (the text in the search bar), we want to update our \"searchList\" state\r\n   * to immediately reflect movies pertaining to the new search term.\r\n   */\r\n  useEffect(() => {\r\n    getMovies(searchValue, setSearchList);\r\n  }, [searchValue]);\r\n\r\n  /**\r\n   * When the list of nominated movies changes, we want to keep track of this in local storage\r\n   */\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"nominatedList\", JSON.stringify(nominatedList));\r\n  }, [nominatedList]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {nominatedList.length === 5 ? (\r\n        <div className=\"bannerContainer\">\r\n          <p className=\"banner\">5 Nominations Selected! 🏆</p>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      <div className=\"AppTitle\">\r\n        <h1>The Shoppies</h1>\r\n      </div>\r\n      <div>\r\n        <SearchBar handleChange={updateSearchValue} />\r\n      </div>\r\n      <div className=\"searchedMovies\">\r\n        <h2 className=\"sectionTitle\">Search Results for \"{searchValue}\"</h2>\r\n        {searchList && searchList.length ? (\r\n          <div className=\"movieList\">\r\n            {searchList.map((movie) => {\r\n              return (\r\n                <>\r\n                  <MovieItem\r\n                    {...movie}\r\n                    key={movie.imdbID}\r\n                    buttonType=\"Nominate\"\r\n                    buttonHandler={nominateMovie}\r\n                    nominatedList={nominatedList}\r\n                  />\r\n                  <div className=\"spaceBetweenMovies\"></div>\r\n                </>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n      <div className=\"nominatedMovies\">\r\n        <h2 className=\"sectionTitle\">\r\n          Nominated Movies ({nominatedList.length}/5)\r\n        </h2>\r\n        {nominatedList && nominatedList.length ? (\r\n          <div className=\"movieList\">\r\n            {nominatedList.map((movie) => {\r\n              return (\r\n                <>\r\n                  <MovieItem\r\n                    {...movie}\r\n                    key={movie.imdbID}\r\n                    buttonType=\"Remove\"\r\n                    buttonHandler={removeMovie}\r\n                  />\r\n                  <div className=\"spaceBetweenMovies\"></div>\r\n                </>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}